// Cheerio .each function is synchrnous. Find a better
// solution for parsing html body s.t. asynchrnous operation can be achieved.
// This will likely singnificantly increase the efficiency of getClass.

var request = require('request');
var async = require('async');
var cheerio = require('cheerio');

module.exports = {
    getClasses,
    getClass
}

function getClasses(semester, arrayOfClasses, callback) {
    async.map(arrayOfClasses, getClass.bind(null, semester), function(err, result) {
        if(err) {
            callback(new Error("Something went terribly wrong"));
        }
        var newClasses = new Object();
        async.each(result, function(data, callback3) {
            newClasses[data.courseID] = data;
            callback3();
        }, function(err) {
            if(!err) {
                callback(null, newClasses);
            }
        })
    })
}

const classTypes = {
    "Applied Art": "APP",
    "Discussion": "DIS",
    "Experience": "EXP",
    "Independent": "IND",
    "Lab": "LAB",
    "Lecture": "LEC",
    "Other": "OTH",
    "Pre-Lab": "PLB"
}

function getClass(semester, input, callback1) {
    input = input.toUpperCase();
    // Initial Parsing of the input
    if(input.length != 8) {
        callback1(new Error('Invalid class : ' + input));
    }
    var college = input.slice(0, 3);
    var dept = input.slice(3, 5);
    var coursenumber = input.slice(5);
    var semesterID = semester;

    // Object that will be returned
    var newClass = new Object();
    newClass.courseID = input;
    newClass.sections = Object();
    var exists = false;
    var finished = false;

    //Initialize asynchrnous queue
    var q = async.queue(function (task, callback) {
        request(task, function (error, response, body) {
            if (!error && response.statusCode == 200) {
                var $ = cheerio.load(body);

                var mainTableRows = $('table').find('tr[align="center"][valign="top"]');
                var classesInfo = mainTableRows.slice(0, -1);

                // Checking if next page needs to be loaded
                var nextPageInfo = mainTableRows.slice(-1);
                var nextPagePointsTo = "";
                $(nextPageInfo).find('input').each(function(i, item) {
                    // Skip the first item in the array because it is a button
                    if (i != 0) {
                        nextPagePointsTo += $(item).attr('value');
                    }
                });
                if (nextPagePointsTo.includes(input)) {
                    var nextsection = nextPagePointsTo.slice(8);
                    var nextUrl = "https://www.bu.edu/link/bin/uiscgi_studentlink.pl/1483972520?ModuleName=univschr.pl&SearchOptionDesc=Class+Number&SearchOptionCd=S&KeySem=" + semesterID + "&ViewSem=Spring+2017&College=" + college + "&Dept=" + dept + "&Course=" + coursenumber + "&Section=" + nextsection;

                    q.push(nextUrl, function(err, done) {
                        if(err) {
                            callback1(err);
                        }
                        else {
                            if(done) {
                                callback1(null, newClass);
                            }
                        }
                    })
                }

                // Parsing html table
                // ClassesInfo is an array of table row
                $(classesInfo).each(function(index, tr) {
                    var newSection = new Object();
                    var skip = false;
                    if (finished) {
                        return;
                    }
                    var days = [];
                    var startTimes = [];
                    var endTimes = [];
                    $($(tr).children()).each(function(i, td) {
                        if (skip || finished) {
                            skip = true;
                            return;
                        }
                        if(i==1) {
                            // cID : Course ID e.g) CASCS111A1
                            console.log(td);
                            var cID = $(td).text().replace(/\s/, '').replace('Â ', '');
                            // sID : Section ID e.g) A1
                            var sID = cID.slice(8);
                            newSection.sectionID = sID;

                            // Check if curent row actually contains class related data
                            if (newSection.sectionID == '') {
                                skip = true;
                                return false;
                            }

                            newSection.courseID = cID;

                            // If initial input is substring of courseID, then the course
                            // exists. Set exists flag to true
                            if(newSection.courseID.includes(input)) {
                                exists = true;
                            }
                            // exists == true -> previously found target -> Reached the end
                            // exists == false -> have not yet found target -> invalid input
                            else {
                                // Course does not exist, callback err
                                if (!exists) {
                                    callback1(new Error('\"' + input + '\" does not exist.'));
                                }
                                finished = true;
                            }
                        }
                        else if(i==2) {
                            var split = $(td).contents().html().split('<br>');
                            if($(td).text() != "") {
                                newSection.title = split[0].replace(/&#xA0;/g, " ").trim();
                                if (split.length > 1) {
                                    newSection.instructor = $(split[1]).text().trim();
                                }
                            }
                        }
                        else if(i==4) {
                            var crdt = $(td).text().trim();
                            newSection.credits = crdt;
                        }
                        else if(i==5) {
                            var tpe = $(td).text().trim();
                            if (tpe in classTypes) {
                                newSection.type = classTypes[tpe];
                            }
                            else {
                                newSection.type = "OTH";
                            }
                        }
                        else if(i==6) {
                            var opnsts = $(td).text().trim();
                            newSection.openSeats = opnsts;
                        }
                        else if(i==9) {
                            var split = $(td).contents().html().split('<br>');
                            $(split).each(function(i, value) {
                                days.push(value);
                            })
                        }
                        else if(i==10) {
                            var split = $(td).contents().html().split('<br>');
                            $(split).each(function(i, value) {
                                startTimes.push(value.trim());
                            })
                        }
                        else if(i==11) {
                            var split = $(td).contents().html().split('<br>');
                            $(split).each(function(i, value) {
                                endTimes.push(value);
                            })
                            var tms = new Object();
                            $(days).each(function(int, val) {
                                tms[val] = {
                                    "start" : startTimes[int],
                                    "end" : endTimes[int]
                                }
                            })
                            newSection.times = tms;
                        }
                        return true;
                    });

                    if (finished) {
                        callback(null, true);
                    }

                    // Add newSection to newClass
                    if(!skip) {
                        if (newSection.type in newClass.sections) {
                            newClass.sections[newSection.type].push(newSection);
                        }
                        else {
                            newClass.sections[newSection.type] = [newSection];
                        }
                    }
                });
            }
            else if (error) {
                callback(new Error('Not Connected to the Internet'));
            }
        });
    }, 10);

    // Creating url
    var url = "https://www.bu.edu/link/bin/uiscgi_studentlink.pl/1483972520?ModuleName=univschr.pl&SearchOptionDesc=Class+Number&SearchOptionCd=S&KeySem=" + semesterID + "&ViewSem=Spring+2017&College=" + college + "&Dept=" + dept + "&Course=" + coursenumber + "&Section=";

    // Pushing initial url
    q.push(url, function(err, done) {
        if(err) {
            callback1(err);
        }
        else {
            if(done) {
                callback1(null, newClass);
            }
        }
    })
}
